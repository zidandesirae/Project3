"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cancelAnimationFrame = exports.requestAnimationFrame = void 0;
// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
// https://gist.github.com/paulirish/1579671
// requestAnimationFrame polyfill by Erik MÃ¶ller. fixes from Paul Irish and Tino Zijdel
// MIT license
var lastTime = 0;
var vendors = ['ms', 'moz', 'webkit', 'o'];
var requestAnimationFrame;
exports.requestAnimationFrame = requestAnimationFrame;
var cancelAnimationFrame;
exports.cancelAnimationFrame = cancelAnimationFrame;

if (typeof window != "undefined") {
  exports.requestAnimationFrame = requestAnimationFrame = window.requestAnimationFrame;
  exports.cancelAnimationFrame = cancelAnimationFrame = window.cancelAnimationFrame;

  for (var x = 0; x < vendors.length && !requestAnimationFrame; ++x) {
    exports.requestAnimationFrame = requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    exports.cancelAnimationFrame = cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
  }
}

if (!requestAnimationFrame) exports.requestAnimationFrame = requestAnimationFrame = function requestAnimationFrame(callback, element) {
  var currTime = new Date().getTime();
  var timeToCall = Math.max(0, 16 - (currTime - lastTime));
  var id = setTimeout(function () {
    callback(currTime + timeToCall);
  }, timeToCall);
  lastTime = currTime + timeToCall;
  return id;
};
if (!cancelAnimationFrame) exports.cancelAnimationFrame = cancelAnimationFrame = function cancelAnimationFrame(id) {
  clearTimeout(id);
};