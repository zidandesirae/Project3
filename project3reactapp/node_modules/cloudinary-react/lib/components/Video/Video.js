"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _cloudinaryCore = require("cloudinary-core");

var _CloudinaryComponent2 = _interopRequireDefault(require("../CloudinaryComponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * A component representing a Cloudinary served video
 */
var Video = /*#__PURE__*/function (_CloudinaryComponent) {
  _inherits(Video, _CloudinaryComponent);

  var _super = _createSuper(Video);

  function Video() {
    var _this;

    _classCallCheck(this, Video);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "mimeType", 'video');

    _defineProperty(_assertThisInitialized(_this), "getMergedProps", function () {
      return _objectSpread({}, _this.getContext(), {}, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "generateVideoUrl", function (cld, publicId, childTransformations, sourceTransformations, sourceType) {
      var sourceTransformation = sourceTransformations[sourceType] || {};

      var urlOptions = _cloudinaryCore.Util.defaults({}, sourceTransformation, childTransformations, {
        resource_type: 'video',
        format: sourceType
      });

      return cld.url(publicId, urlOptions);
    });

    _defineProperty(_assertThisInitialized(_this), "generateSources", function (cld, publicId, childTransformations, sourceTransformations, sourceTypes) {
      return sourceTypes.map(function (sourceType) {
        var src = _this.generateVideoUrl(cld, publicId, childTransformations, sourceTransformations, sourceType);

        var mimeType = "".concat(_this.mimeType, "/").concat(sourceType === 'ogv' ? 'ogg' : sourceType);
        return /*#__PURE__*/_react["default"].createElement("source", {
          key: mimeType,
          src: src,
          type: mimeType
        });
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getVideoTagProps", function () {
      var _this$getMergedProps = _this.getMergedProps(),
          innerRef = _this$getMergedProps.innerRef,
          publicId = _this$getMergedProps.publicId,
          fallback = _this$getMergedProps.fallback,
          children = _this$getMergedProps.children,
          sourceTypes = _this$getMergedProps.sourceTypes,
          _this$getMergedProps$ = _this$getMergedProps.sourceTransformation,
          sourceTransformation = _this$getMergedProps$ === void 0 ? {} : _this$getMergedProps$,
          options = _objectWithoutProperties(_this$getMergedProps, ["innerRef", "publicId", "fallback", "children", "sourceTypes", "sourceTransformation"]);

      options = _CloudinaryComponent2["default"].normalizeOptions(options, {});

      var snakeCaseOptions = _cloudinaryCore.Util.withSnakeCaseKeys(options);

      var cld = _cloudinaryCore.Cloudinary["new"](snakeCaseOptions); // Let cloudinary-core generate this video tag attributes


      var tagAttributes = _cloudinaryCore.Util.withCamelCaseKeys(cld.videoTag(publicId, options).attributes()); // Aggregate child transformations, used for generating <source> tags for this video element


      var childTransformations = _this.getTransformation(_objectSpread({}, options, {
        children: children
      }));

      var sources = null;

      if (_cloudinaryCore.Util.isArray(sourceTypes)) {
        // We have multiple sourceTypes, so we generate <source> tags.
        sources = _this.generateSources(cld, publicId, childTransformations, sourceTransformation, sourceTypes);
      } else {
        // We have a single source type so we generate the src attribute of this video element.
        tagAttributes.src = _this.generateVideoUrl(cld, publicId, childTransformations, sourceTransformation, sourceTypes);
      }

      return {
        sources: sources,
        tagAttributes: tagAttributes
      };
    });

    return _this;
  }

  _createClass(Video, [{
    key: "render",

    /**
     * Render a video element
     */
    value: function render() {
      var _this$props = this.props,
          innerRef = _this$props.innerRef,
          fallback = _this$props.fallback,
          children = _this$props.children;

      var _this$getVideoTagProp = this.getVideoTagProps(),
          tagAttributes = _this$getVideoTagProp.tagAttributes,
          sources = _this$getVideoTagProp.sources;

      return /*#__PURE__*/_react["default"].createElement("video", _extends({
        ref: innerRef
      }, tagAttributes), sources, fallback, children);
    }
  }]);

  return Video;
}(_CloudinaryComponent2["default"]);

Video.propTypes = {
  publicId: _propTypes["default"].string
};
Video.defaultProps = {
  sourceTypes: _cloudinaryCore.Cloudinary.DEFAULT_VIDEO_PARAMS.source_types
};
var _default = Video;
exports["default"] = _default;